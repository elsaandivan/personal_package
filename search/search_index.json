{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#personal_package","title":"personal_package","text":"<p>Skeleton project created by Cookiecutter PyPackage</p> <ul> <li>Documentation: https://anyidea.github.io/elsa</li> <li>GitHub: https://github.com/anyidea/elsa</li> <li>PyPI: https://pypi.org/project/elsa/</li> <li>Free software: MIT</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>This package was created with Cookiecutter and the wccdev/cookiecutter-pypackage project template.</p>"},{"location":"api/","title":"Modules","text":"<p>Top-level package for personal_package.</p> <p>Main module.</p>"},{"location":"api/#elsa.calculations.add","title":"<code>add(a, b)</code>","text":"<p>\u8ba1\u7b97\u4e24\u4e2a\u6570\u7684\u548c.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; add(4.0, 2.0)\n6.0\n&gt;&gt;&gt; add(4, 2)\n6.0\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Union[float, int]</code> <p>A number representing the first addend in the addition.</p> required <code>b</code> <code>Union[float, int]</code> <p>A number representing the second addend in the addition.</p> required <p>Returns:</p> Type Description <code>float</code> <p>A number representing the arithmetic sum of <code>a</code> and <code>b</code>.</p> Source code in <code>elsa/calculations.py</code> <pre><code>def add(a: Union[float, int], b: Union[float, int]) -&gt; float:\n\"\"\"\u8ba1\u7b97\u4e24\u4e2a\u6570\u7684\u548c.\n    Examples:\n        &gt;&gt;&gt; add(4.0, 2.0)\n        6.0\n        &gt;&gt;&gt; add(4, 2)\n        6.0\n    Args:\n        a: A number representing the first addend in the addition.\n        b: A number representing the second addend in the addition.\n    Returns:\n        A number representing the arithmetic sum of `a` and `b`.\n    \"\"\"\nreturn float(a + b)\n</code></pre>"},{"location":"api/#elsa.calculations.divide","title":"<code>divide(a, b)</code>","text":"<p>\u8ba1\u7b97\u4e24\u4e2a\u6570\u7684\u5546</p> Note <p><code>0</code>\u4e0d\u80fd\u505a\u9664\u6570.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; divide(3.0, 2.0)\n1.5\n&gt;&gt;&gt; divide(3, 2)\n1.5\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Union[float, int]</code> <p>A number representing the divisor in the division.</p> required <code>b</code> <code>Union[float, int]</code> <p>A number representing the dividend in the division.</p> required <p>Returns:</p> Type Description <code>float</code> <p>A number representing the arithmetic quotient of <code>a</code> and <code>b</code>.</p> <p>Raises:</p> Type Description <code>ZeroDivisionError</code> <p>dividend cannot be zero number.</p> Source code in <code>elsa/calculations.py</code> <pre><code>def divide(a: Union[float, int], b: Union[float, int]) -&gt; float:\n\"\"\"\u8ba1\u7b97\u4e24\u4e2a\u6570\u7684\u5546\n    Note:\n        `0`\u4e0d\u80fd\u505a\u9664\u6570.\n    Examples:\n        &gt;&gt;&gt; divide(3.0, 2.0)\n        1.5\n        &gt;&gt;&gt; divide(3, 2)\n        1.5\n    Args:\n        a: A number representing the divisor in the division.\n        b: A number representing the dividend in the division.\n    Returns:\n        A number representing the arithmetic quotient of `a` and `b`.\n    Exceptions:\n        ZeroDivisionError: dividend cannot be zero number.\n    \"\"\"\nif b == 0:\nraise ZeroDivisionError(\"division by zero\")\nreturn float(a / b)\n</code></pre>"},{"location":"api/#elsa.calculations.multiply","title":"<code>multiply(a, b)</code>","text":"<p>\u8ba1\u7b97\u4e24\u4e2a\u6570\u7684\u79ef</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; multiply(2.0, 3.0)\n6.0\n&gt;&gt;&gt; multiply(2, 3)\n6.0\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Union[float, int]</code> <p>A number representing the first multiplicator in the multiplication.</p> required <code>b</code> <code>Union[float, int]</code> <p>A number representing the second multiplicator in the multiplication.</p> required <p>Returns:</p> Type Description <code>float</code> <p>A number representing the arithmetic product of <code>a</code> and <code>b</code>.</p> Source code in <code>elsa/calculations.py</code> <pre><code>def multiply(a: Union[float, int], b: Union[float, int]) -&gt; float:\n\"\"\"\u8ba1\u7b97\u4e24\u4e2a\u6570\u7684\u79ef\n    Examples:\n        &gt;&gt;&gt; multiply(2.0, 3.0)\n        6.0\n        &gt;&gt;&gt; multiply(2, 3)\n        6.0\n    Args:\n        a: A number representing the first multiplicator in the multiplication.\n        b: A number representing the second multiplicator in the multiplication.\n    Returns:\n        A number representing the arithmetic product of `a` and `b`.\n    \"\"\"\nreturn float(a * b)\n</code></pre>"},{"location":"api/#elsa.calculations.subtract","title":"<code>subtract(a, b)</code>","text":"<p>\u8ba1\u7b97\u4e24\u4e2a\u6570\u7684\u5dee.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; subtract(3.0, 1.0)\n2.0\n&gt;&gt;&gt; subtract(3, 1)\n2.0\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Union[float, int]</code> <p>A number representing the subtrahend in the subtraction.</p> required <code>b</code> <code>Union[float, int]</code> <p>A number representing the minuend in the subtraction.</p> required <p>Returns:</p> Type Description <code>float</code> <p>A number representing the arithmetic remainder of <code>a</code> and <code>b</code>.</p> Source code in <code>elsa/calculations.py</code> <pre><code>def subtract(a: Union[float, int], b: Union[float, int]) -&gt; float:\n\"\"\"\u8ba1\u7b97\u4e24\u4e2a\u6570\u7684\u5dee.\n    Examples:\n        &gt;&gt;&gt; subtract(3.0, 1.0)\n        2.0\n        &gt;&gt;&gt; subtract(3, 1)\n        2.0\n    Args:\n        a: A number representing the subtrahend in the subtraction.\n        b: A number representing the minuend in the subtraction.\n    Returns:\n        A number representing the arithmetic remainder of `a` and `b`.\n    \"\"\"\nreturn float(a - b)\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":""},{"location":"changelog/#010-2023-07-31","title":"0.1.0 (2023-07-31)","text":"<ul> <li>First release on PyPI.</li> </ul>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/anyidea/elsa/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>personal_package could always use more documentation, whether as part of the official personal_package docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/anyidea/elsa/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions   are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up <code>elsa</code> for local development.</p> <ol> <li>Fork the <code>elsa</code> repo on GitHub.</li> <li> <p>Clone your fork locally</p> <pre><code>$ git clone git@github.com:your_name_here/elsa.git\n</code></pre> </li> <li> <p>Ensure poetry is installed.</p> </li> <li> <p>Install dependencies and start your virtualenv:</p> <pre><code>$ poetry install --with test,doc,dev\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass the    tests, including testing other Python versions, with tox:</p> <pre><code>$ poetry run tox\n</code></pre> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put    your new functionality into a function with a docstring, and add the    feature to the list in README.md.</li> <li>The pull request should work for Python 3.8, 3.9 and 3.10. Check    https://github.com/anyidea/elsa/actions    and make sure that the tests pass for all supported Python versions.</li> </ol>"},{"location":"contributing/#tips","title":"Tips","text":"<pre><code>$ poetry run pytest tests/test_elsa.py\n</code></pre> <p>To run a subset of tests.</p>"},{"location":"contributing/#deploying","title":"Deploying","text":"<p>A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run:</p> <pre><code>$ poetry run bump2version patch # possible: major / minor / patch\n$ git push\n$ git push --tags\n</code></pre> <p>GitHub Actions will then deploy to PyPI if tests pass.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install personal_package, run this command in your terminal:</p> <pre><code>$ pip install elsa\n</code></pre> <p>This is the preferred method to install personal_package, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-source","title":"From source","text":"<p>The source for personal_package can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>$ git clone git://github.com/anyidea/elsa\n</code></pre> <p>Or download the tarball:</p> <pre><code>$ curl -OJL https://github.com/anyidea/elsa/tarball/master\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>$ pip install .\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use personal_package in a project</p> <pre><code>import elsa\n</code></pre>"}]}